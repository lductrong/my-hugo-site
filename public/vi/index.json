[
{
	"uri": "//localhost:1313/vi/3-target-group/3.1/",
	"title": "Tạo bảng DynamoDB",
	"tags": [],
	"description": "",
	"content": "Trong task này, chúng ta sẽ tạo một bảng trong DynamoDB để lưu thông tin của các bài viết, bao gồm nội dung văn bản và URL của tệp MP3 tương ứng. Ta tạo một bảng “posts” có khóa chính (id) là một chuỗi do hàm New Post Lambda tạo ra khi một new post được chèn vào cơ sở dữ liệu.\nCác bước thực hiện như sau: Bước 1. Điều hướng tới trang dịch vụ của DynamoDB\nBước 2. Chọn Create table\nBước 3. Thiết lập bảng như sau:\nTable name: posts\nPartition key: id\nTable settings: ta chọn mặc định Default settings\nBước 4. Chọn Create table để tạo bảng\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Xây dựng một ứng dụng Text-to-Speech serverless với Amazon Polly",
	"tags": [],
	"description": "",
	"content": "Xây dựng một ứng dụng Text-to-Speech serverless với Amazon Polly Tổng quan Chuyển đổi văn bản thành giọng nói là một công nghệ khá phức tạp và cần có sự nghiên cứu chuyên sâu. Tình huống một số từ được đọc lên mà không có nghĩa hoàn toàn có thể xảy ra. Một số yếu tố gây nên những lỗi này của các ứng dụng chuyển đổi văn bản thành giọng nói bao gồm: các từ có cách viết giống nhau nhưng cách phát âm khác nhau, chuẩn hóa văn bản, chuyển đổi văn bản thành âm vị, tên người, tiếng lóng và từ viết tắt.\nAmazon Polly cung cấp khả năng vượt qua các vấn đề trên, khi đó chúng ta chỉ cần tập trung vào việc xây dựng các ứng dụng sử dụng công nghệ TTS mà không cần lo lắng về các vấn đề giải thuật.\nGiới thiệu về Amazon Polly Amazon Polly là dịch vụ chuyển đổi văn bản thành giọng nói (text-to-speech - TTS) của Amazon Web Services (AWS). Polly sử dụng công nghệ học sâu để chuyển văn bản thành giọng nói tự nhiên, đa ngôn ngữ, dễ dàng tích hợp vào các ứng dụng để tạo nội dung âm thanh chất lượng cao.\nCác điểm nổi bật của Amazon Polly:\nGiọng nói tự nhiên: Polly hỗ trợ hàng chục giọng nói chân thực từ hơn 20 ngôn ngữ. Phản hồi nhanh chóng: Dịch vụ có thời gian phản hồi theo thời gian thực, phù hợp cho các ứng dụng như trợ lý ảo và chatbot. Dễ dàng tích hợp: Polly dễ dàng tích hợp thông qua API. Hỗ trợ SSML: Polly hỗ trợ Speech Synthesis Markup Language (SSML), cho phép tùy chỉnh giọng nói với các yếu tố như ngữ điệu, tốc độ và phát âm. Chi phí hiệu quả: Ta không bị tính phí bổ sung cho việc sử dụng âm thanh đã chuyển đổi. Khả năng lưu trữ và phát lại: Polly cho phép lưu trữ và phát lại các tệp âm thanh để sử dụng mà không cần kết nối mạng. Mục tiêu workshop Ứng dụng Chuyển Đổi Văn Bản Thành Giọng Nói (Text-to-Speech - TTS) làm đa dạng thêm các cách tiếp cận thông tin, đặc biệt là đối với người khiếm thị. Cải thiện trải nghiệm người dùng trong các hệ thống trợ lý ảo, chatbot hoặc phục vụ những hoạt động giải trí như nghe sách, báo, truyện.\nTrong workshop này, bạn sẽ được giới thiệu về cách Xây dựng một ứng dụng Text-to-Speech serverless với Amazon Polly. Cách mà Amazon Polly được tích hợp vào ứng dụng của mình để chuyển văn bản thành giọng nói tự nhiên.\n"
},
{
	"uri": "//localhost:1313/vi/1-prerequisite/",
	"title": "Đề cương Hội thảo",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Sau khi hoàn thành workshop, bạn sẽ có thể: Tạo bảng Amazon DynamoDB để lưu trữ dữ liệu Tạo API RESTful với Amazon API Gateway Tạo các hàm AWS Lambda được kích hoạt bởi API Gateway Kết nối các hàm AWS Lambda với Amazon Simple Notification Service (SNS) Sử dụng Amazon Polly để tổng hợp giọng nói bằng nhiều ngôn ngữ và giọng điệu khác nhau Môi trường cho workshop Vì là xây dựng một ứng dụng serverless, nghĩa là bạn không cần làm việc với các máy chủ - không cần chuẩn bị sẵn tài nguyên, vá lỗi, hoặc mở rộng. AWS Cloud sẽ tự động xử lý hết các điều trên, cho phép bạn tập trung vào ứng dụng của mình.\nỨng dụng này cung cấp hai methods chính – một để gửi thông tin về new post (post này sẽ được chuyển đổi thành tệp MP3) và một để lấy thông tin về một post (bài viết) đã có (bao gồm cả đường dẫn đến tệp MP3 được lưu trữ trong một S3 bucket của Amazon). Cả hai phương thức này đều được triển khai dưới dạng dịch vụ web RESTful thông qua Amazon API Gateway.\nKhi gửi thông tin về new post: Thông tin được gửi thông qua dịch vụ web RESTful, được Amazon API Gateway cung cấp. Dịch vụ này được gọi từ một trang web tĩnh được lưu trữ trên Amazon S3. Amazon API Gateway kích hoạt một AWS Lambda function tên là \u0026ldquo;New Post\u0026rdquo;, chịu trách nhiệm khởi tạo quá trình tạo tệp MP3. Lambda function này chèn thông tin về bài viết vào một bảng Amazon DynamoDB, nơi lưu trữ thông tin về tất cả các bài viết. Để xử lý toàn bộ quá trình một cách bất đồng bộ, ứng dụng sử dụng Amazon Simple Notification Service (SNS) để tách biệt quá trình nhận thông tin bài viết mới và quá trình chuyển đổi bài viết thành âm thanh. Một Lambda function khác tên là \u0026ldquo;Convert to Audio\u0026rdquo; được đăng ký với chủ đề SNS này và sẽ được kích hoạt bất cứ khi nào có thông báo mới (đồng nghĩa với việc có một bài viết mới cần được chuyển đổi thành tệp âm thanh). Hàm Lambda “Convert to Audio” sử dụng Amazon Polly để chuyển đổi văn bản thành tệp âm thanh theo ngôn ngữ được chỉ định (nó phải cùng với ngôn ngữ của văn bản). Tệp MP3 mới được lưu vào một S3 bucket. Thông tin về bài viết được cập nhật trong bảng DynamoDB, bao gồm cả URL của tệp âm thanh đã được lưu trong S3. Khi lấy thông tin về post: Dịch vụ web RESTful được triển khai thông qua Amazon API Gateway, cung cấp phương thức lấy thông tin bài viết. Phương thức này chứa văn bản của bài viết và đường dẫn tới S3 bucket nơi lưu trữ tệp MP3. Dịch vụ web này cũng được gọi từ một trang web tĩnh lưu trữ trên Amazon S3. Amazon API Gateway gọi hàm Get Post Lambda, triển khai logic để lấy dữ liệu bài viết. Get Post Lambda function truy xuất thông tin về bài viết (bao gồm cả đường dẫn đến Amazon S3) từ bảng DynamoDB và trả về thông tin đó. "
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.2/",
	"title": "Tạo Amazon S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Trong task này, chúng ta sẽ tạo một Amazon S3 bucket dùng làm nơi lưu trữ tất cả các tệp âm thanh sẽ được tạo bởi ứng dụng sau này. S3 là một lựa chọn rất lý tưởng với độ bảo mật, khả năng mở rộng cùng với độ bền cao (99.999999999%) và tính sẵn có cao (99.99%).\nCác bước để thực hiện: Bước 1. Điều hướng vào AWS Management Console, tìm kiếm S3\nBước 2. Trong trang dịch vụ của S3 chọn Create bucket\nBước 3. Cấu hình Bucket\nBucket name: Nhập một tên độc nhất, ở đây tôi đặt là audioposts-19012003\nHãy ghi chú lại tên của bucket để có thể sử dụng về sau\nObject Ownership: Chọn “ACLs enabled”.\nBlock Public Access settings:\nBỏ chọn “Block all public access”. Sau đó bỏ chọn tất cả các tùy chọn khác. Chọn vào ô “I acknowledge that the current settings might result in this bucket and the objects within becoming public.”\nBước 4. Chọn Create bucket để hoàn tất việc tạo bucket\nBởi vì mỗi Amazon S3 bucket phải có một tên duy nhất trên toàn cầu trong tất cả các AWS. Trong trường hợp tên bị trùng, AWS sẽ báo lỗi “Bucket with the same name already exists” và tự động đưa bạn về mục bucket name để đặt một tên khác. Hãy thử đổi các con số cho đến khi tên không còn trùng nữa.\nNgược lại, sẽ có thông báo khi S3 bucket được tạo thành công.\n"
},
{
	"uri": "//localhost:1313/vi/2-launch-template/",
	"title": "Thiết lập Môi trường",
	"tags": [],
	"description": "",
	"content": "Khởi tạo một CloudFormation Stack Chúng ta sẽ dùng một AWS CloudFormation template để thiết lập các tài nguyên cần dùng cho workshop trong AWS Region mà ta chọn. Điều này rất quan trọng vì các hướng dẫn tiếp theo sẽ phụ thuộc và các tài nguyên này. CloudFormation template này sẽ cung cấp các tài nguyên sau:\nIAM Role Bảng Amazon DynamoDB AWS Step Functions State Machine Các bước thực hiện như sau:\nBước 1. Tải CloudFormation template (tệp YAML) và lưu vào một thư mực riêng trên máy tính: Tải xuống tại đây.\nBước 2. Hãy mở AWS CloudFormation Console lên.\nBước 3. Chọn Create stack\nBước 4. Tạo stack\nTại mục Prepare template chọn Choose an existing template Tại mục Template source chọn Upload a template file Chọn file template vừa tải về sau đó chọn Next. Bước 5. Đặt tên cho stack\nỞ đây, tôi đặt tên là TTS-serverless. Chọn Next.\nBước 6. Các cấu hình của stack ta để mặc định\nTại mục Capabilities ta cho phép AWS CloudFormation được tạo tài nguyên IAM\nChọn Submit để triển khai template\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/",
	"title": "Danh sách nhiệm vụ",
	"tags": [],
	"description": "",
	"content": "Đây là danh sách 9 task cần hoàn thành trong workshop này:\nTạo bảng DynamoDB Tạo Amazon S3 Bucket Tạo chủ đề SNS Tạo hàm Lambda cho bài viết mới Tạo hàm Lambda chuyển đổi thành âm thanh Kiểm tra các hàm Tạo hàm Lambda lấy bài viết Công khai hàm Lambda dưới dạng dịch vụ web RESTful Tạo giao diện người dùng không máy chủ "
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.3/",
	"title": "Tạo một chủ đề SNS (SNS topic)",
	"tags": [],
	"description": "",
	"content": "Trong task này, chúng ta sẽ tạo một chủ đề SNS để tạo điều kiện giao tiếp giữa các hàm Lamda với nhau. Cần thiết lập chủ đề SNS là bởi quá trình chuyển đổi một bài viết ( dạng văn bản) thành tệp âm thanh được chia thành hai hàm AWS Lambda. Điều này bởi một vài lý do sau:\nTính bất đồng bộ và phản hồi nhanh cho người dùng: Khi một new post được gửi, ta sẽ nhận ngay ID của bài viết trong DynamoDB dù cho quá trình chuyển đổi sang tệp âm thanh vẫn chưa hoàn tất. Điều này giúp cải thiện trải nghiệm người dùng, đặc biệt với những bài viết lớn, vì họ không phải chờ đợi lâu.\nKhả năng mở rộng và tối ưu hóa tài nguyên: Việc tách riêng hai quy trình cho phép tối ưu hóa việc sử dụng tài nguyên và mở rộng hệ thống khi cần. Ví dụ, hàm Lambda đầu tiên chỉ cần thực hiện các thao tác nhẹ nhàng như ghi nhận bài viết và lưu vào DynamoDB, trong khi hàm thứ hai sẽ xử lý chuyển đổi phức tạp hơn với Amazon Polly.\nTính linh hoạt: Bằng cách tách biệt quá trình tạo bài viết và quá trình chuyển đổi âm thanh, chúng ta tạo ra một hệ thống linh hoạt và dễ bảo trì hơn.\nCác bước thực hiện: Bước 1. Điều hướng vào AWS Management Console, tìm kiếm SNS\nBước 2. Trong trang dịch vụ của Amazon Simple Notification Service chọn mục Topics sau đó chọn Create topic\nBước 3. Cấu hình topic\nType: Chọn Standard\nName: Đặt tên là: new_posts\nDisplay name: Đặt là: New Posts\nBước 4. Tại cuối trang, chọn Create topic\nBước 5. Lưu ARN của chủ đề\nSau khi tạo, bạn sẽ thấy ARN của Chủ đề (Amazon Resource Name). Ghi chú ARN này lại để sử dụng trong cấu hình Lambda functions.\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.4/",
	"title": "Tạo new post Lambda function",
	"tags": [],
	"description": "",
	"content": "Trong task này, chúng ta sẽ tạo hàm Lambda đầu tiên của ứng dụng. Hàm này chính là điểm vào, nhận thông tin về các bài viết mới cần được chuyển thành tệp âm thanh.\nCác bước để tạo hàm Lambda: Bước 1. Điều hướng vào AWS Management Console, tìm kiếm Lambda\nBước 2. Trong trang dịch vụ của Lambda chọn Create function\nBước 3. Thiết lập cho hàm\nChọn tùy chọn Author from scratch\nFunction name: Đặt tên hàm: PostReader_NewPost\nRuntime: Chọn Python 3.12\nNhấn vào Change default execution role để mở rộng các tùy chọn vai trò thực thi mặc định\nExecution role: Chọn Use an existing role\nExisting role: Chọn Lab-Lambda-Role\nChọn create function để hoàn tất quá trình tạo hàm.\nBước 4. Thêm code vào hàm\nTrong phần Function code, xóa code hiện có\nDán code Python sau:\nimport boto3 import os import uuid def lambda_handler(event, context): recordId = str(uuid.uuid4()) voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] print(\u0026#39;Generating new DynamoDB record, with ID: \u0026#39; + recordId) print(\u0026#39;Input Text: \u0026#39; + text) print(\u0026#39;Selected voice: \u0026#39; + voice) # Tạo bản ghi mới trong bảng DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39; : recordId, \u0026#39;text\u0026#39; : text, \u0026#39;voice\u0026#39; : voice, \u0026#39;status\u0026#39; : \u0026#39;PROCESSING\u0026#39; } ) # Gửi thông báo về bài viết mới tới SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn = os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message = recordId ) return recordId Hàm Lambda thực hiện các nhiệm vụ sau:\nLấy hai tham số đầu vào:\nVoice: Một trong số hàng chục giọng nói được hỗ trợ bởi Amazon Polly Text: Nội dung của bài viết cần được chuyển đổi thành tệp âm thanh Tạo một bản ghi mới trong bảng DynamoDB với thông tin về bài viết mới\nGửi thông tin về bài viết mới tới SNS\nTrả về ID của mục DynamoDB cho người dùng\nBước 5. Chọn deploy để lưu các thay đổi\nBước 6. Cấu hình biến môi trường\nĐiều hướng đến tab “Configuration”\nTrong bảng điều khiển bên trái, chọn “Environment variables”\nChọn vào “Edit” và thêm các biến sau:\nKey: Nhập: SNS_TOPIC, Value: [Dán ARN chủ đề SNS lúc trước ta tạo] Key: Nhập: DB_TABLE_NAME, Value: Nhập: posts Chọn vào “Save”\nBước 7. Cấu hình chung\nTrong bảng điều khiển bên trái của tab Configuration, chọn “General configuration”\nNhấp vào “Edit”\nCập nhật Timeout thành 10 giây\nNhấp vào “Save”\nCác bước kiểm tra hàm Lambda: Bước 1. Tạo một sự kiện kiểm tra\nĐiều hướng đến tab “Test”\nCấu hình một sự kiện kiểm tra mới với các chi tiết sau:\nEvent name: Joanna Event JSON: {\r\u0026#34;voice\u0026#34;: \u0026#34;Joanna\u0026#34;,\r\u0026#34;text\u0026#34;: \u0026#34;This is working!\u0026#34;\r} Chọn Save Bước 2. Chạy test\nNhấp vào “Test” để thực thi sự kiện kiểm tra của bạn\nBạn sẽ thấy thông báo “Execution result: succeeded”\nMở rộng phần “Details” để xem nhật ký thực thi.\n"
},
{
	"uri": "//localhost:1313/vi/4-load-balance/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Qua workshop Xây dựng một ứng dụng Text-to-Speech serverless với Amazon Polly, bạn đã được trải nghiệm quá trình xây dựng một ứng dụng serverless sử dụng các dịch vụ mạnh mẽ của AWS như Amazon Polly, Lambda, API Gateway, DynamoDB, và S3. Bằng cách triển khai ứng dụng hoàn toàn trên nền tảng serverless, bạn không chỉ tiết kiệm được công sức trong việc quản lý hạ tầng, mà còn đảm bảo tính linh hoạt, khả năng mở rộng và tối ưu chi phí.\nỨng dụng này chỉ là một ví dụ nhỏ về Text-to-Speech, chúng ta hoàn toàn có thể đưa tính năng này vào những dự án lớn hơn nhằm cải thiện trải nghiệm cho người dùng như học tập, nghe nội dung trong khi di chuyển. Với Amazon Polly và hệ sinh thái serverless của AWS, bạn có thể dễ dàng mở rộng ứng dụng, thêm tính năng thú vị mới vào.\nKết thúc workshop, bạn đã có kiến thức căn bản về cách sử dụng công nghệ serverless để xây dựng ứng dụng thực tế, đồng thời hiểu rõ các thành phần liên quan trong việc thiết kế và triển khai hệ thống không máy chủ.\nCác tài liệu tham khảo của workshop\nXây dựng ứng dụng chuyển văn bản thành giọng nói của riêng bạn với Amazon Polly Amazon Polly là gì? Amazon API Gateway là gì? AWS Lambda là gì? "
},
{
	"uri": "//localhost:1313/vi/5-clean-up/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Sau khi thực hiện xong workshop, điều quan trọng là xóa stack CloudFormation để tránh các chi phí không mong muốn phát sinh. Thực hiện các bước sau để dọn dẹp tài nguyên:\nBước 1. Mở AWS CloudFormation Console.\nBước 2.Chọn stack bạn đã tạo cho workshop này\nBước 3. Nhấp vào nút “Delete” Bước 4. Trong hộp thoại xác nhận,chọn Delete để xác nhận việc xóa.\nBước 5. Chờ quá trình xóa stack hoàn tất. Quá trình này có thể mất vài phút.\nKhi stack đã bị xóa, tất cả các tài nguyên liên quan sẽ được xóa khỏi tài khoản của bạn.\nNhư vậy là các tài nguyên đã được dọn dẹp. Để tránh những lãng phí không cần thiết, ta nên thường xuyên kiểm tra các dịch vụ đang hoạt động trên tài khoản AWS. Đối với những dịch vụ không còn dùng nữa thì nên xóa đi.\nBài workshop đến đây cũng đã kết thúc. Rất cảm ơn đã xem.\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.5/",
	"title": "Tạo hàm Lambda “convert to audio”",
	"tags": [],
	"description": "",
	"content": "Trong task này, chúng ta sẽ tạo một hàm Lambda để chuyển đổi văn bản được lưu trữ trong bảng DynamoDB thành tệp âm thanh. Đây là hàm trung tâm của ứng dụng quyết định chức năng chính của ứng dụng.\nCác bước để tạo hàm Lambda Bước 1. Điều hướng vào AWS Management Console, tìm kiếm Lambda\nBước 2. Trong trang dịch vụ của Lambda chọn Create function\nBước 3. Cấu hình hàm\nChọn tùy chọn Author from scratch\nFunction name: Đặt tên hàm: ConvertToAudio\nRuntime: Chọn Python 3.12\nNhấn vào Change default execution role để mở rộng các tùy chọn vai trò thực thi mặc định\nExecution role: Chọn Use an existing role\nExisting role: Chọn Lab-Lambda-Role\nChọn create function để hoàn tất quá trình tạo hàm.\nBước 4. Thêm code vào hàm\nTrong phần Function code, xóa code hiện có\nDán code Python sau:\nimport boto3 import os from contextlib import closing from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): postId = event[\u0026#34;Records\u0026#34;][0][\u0026#34;Sns\u0026#34;][\u0026#34;Message\u0026#34;] print (\u0026#34;Text to Speech function. Post ID in DynamoDB: \u0026#34; + postId) # Retrieving information about the post from DynamoDB table dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) postItem = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) text = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;text\u0026#34;] voice = postItem[\u0026#34;Items\u0026#34;][0][\u0026#34;voice\u0026#34;] rest = text # Because single invocation of the polly synthesize_speech api can # transform text with about 3000 characters, we are dividing the # post into blocks of approximately 2500 characters. textBlocks = [] while (len(rest) \u0026gt; 2600): begin = 0 end = rest.find(\u0026#34;.\u0026#34;, 2500) if (end == -1): end = rest.find(\u0026#34; \u0026#34;, 2500) textBlock = rest[begin:end] rest = rest[end:] textBlocks.append(textBlock) textBlocks.append(rest) # For each block, invoke Polly API, which transforms text into audio polly = boto3.client(\u0026#39;polly\u0026#39;) for textBlock in textBlocks: response = polly.synthesize_speech( OutputFormat=\u0026#39;mp3\u0026#39;, Text = textBlock, VoiceId = voice ) # Save the audio stream returned by Amazon Polly on Lambda\u0026#39;s temp # directory. If there are multiple text blocks, the audio stream # is combined into a single file. if \u0026#34;AudioStream\u0026#34; in response: with closing(response[\u0026#34;AudioStream\u0026#34;]) as stream: output = os.path.join(\u0026#34;/tmp/\u0026#34;, postId) if os.path.isfile(output): mode = \u0026#34;ab\u0026#34; # Append binary mode else: mode = \u0026#34;wb\u0026#34; # Write binary mode (create a new file) with open(output, mode) as file: file.write(stream.read()) s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.upload_file(\u0026#39;/tmp/\u0026#39; + postId, os.environ[\u0026#39;BUCKET_NAME\u0026#39;], postId + \u0026#34;.mp3\u0026#34;) s3.put_object_acl(ACL=\u0026#39;public-read\u0026#39;, Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;], Key= postId + \u0026#34;.mp3\u0026#34;) location = s3.get_bucket_location(Bucket=os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) region = location[\u0026#39;LocationConstraint\u0026#39;] if region is None: url_beginning = \u0026#34;https://s3.amazonaws.com/\u0026#34; else: url_beginning = \u0026#34;https://s3-\u0026#34; + str(region) + \u0026#34;.amazonaws.com/\u0026#34; url = url_beginning \\ + str(os.environ[\u0026#39;BUCKET_NAME\u0026#39;]) \\ + \u0026#34;/\u0026#34; \\ + str(postId) \\ + \u0026#34;.mp3\u0026#34; # Updating the item in DynamoDB response = table.update_item( Key={\u0026#39;id\u0026#39;:postId}, UpdateExpression= \u0026#34;SET #statusAtt = :statusValue, #urlAtt = :urlValue\u0026#34;, ExpressionAttributeValues= {\u0026#39;:statusValue\u0026#39;: \u0026#39;UPDATED\u0026#39;, \u0026#39;:urlValue\u0026#39;: url}, ExpressionAttributeNames= {\u0026#39;#statusAtt\u0026#39;: \u0026#39;status\u0026#39;, \u0026#39;#urlAtt\u0026#39;: \u0026#39;url\u0026#39;}, ) return Hàm Lambda thực hiện các nhiệm vụ sau:\nLấy nội dung văn bản từ DynamoDB dựa trên ID bài viết được cung cấp. Chia văn bản thành các đoạn nhỏ hơn (nếu cần thiết). Sử dụng Amazon Polly để chuyển đổi từng đoạn văn bản thành giọng nói. Lưu các tệp âm thanh kết quả vào một bucket S3. Việc chia nhỏ các đoạn văn bản để chuyển sang âm thanh sau đó nối các đoạn âm thanh lại với nhau giúp tránh được giới hạn 3000 chữ đầu vào của Polly. Điều này làm ứng dụng hoạt động thông suốt và hiệu quả.\nBước 5. Chọn Deploy để lưu những thay đổi\nBước 6. Cấu hình biến môi trường\nĐiều hướng đến tab “Configuration”\nTrong bảng điều khiển bên trái, chọn “Environment variables”\nChọn vào “Edit” và thêm các biến sau:\nKey: Nhập: DB_TABLE_NAME, Value: Nhập: posts Key: Nhập: BUCKET_NAME, Value: audioposts-19012003 (Nhập tên bucket mà ta đã tạo trước đó) Chọn vào “Save”\nBước 7. Cấu hình chung\nTrong bảng điều khiển bên trái của tab Configuration, chọn “General configuration”\nNhấp vào “Edit”\nCập nhật Timeout thành 5 phút\nNhấp vào “Save”\nBước 8. Cấu hình chức năng tự động kích hoạt khi có tin nhắn được gửi đến chủ đề SNS đã tạo trước đó.\nTrong bảng điều khiển bên trái của tab Configuration, chọn “Triggers”\nNhấp vào “Add trigger”\nChọn nguồn là: SNS\nSNS topics: Chọn new_posts từ topics đã có sẵn\nNhấp vào “Add”\nVậy là ta đã tạo xong 2 hàm Lambda. Kế đến ta có thể kiểm tra xem 2 hàm Lamda có giao tiếp thành công qua SNS hay không.\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.6/",
	"title": "Kiểm tra các hàm",
	"tags": [],
	"description": "",
	"content": "Trong task này, ta kiểm tra 2 hàm đã tạo có hoạt động hay chưa. Quy trình hoạt động của nó sẽ bao gồm:\nKích hoạt thủ công hàm Lambda New Post Dữ liệu được thêm vào trong DynamoDB và gửi một tin nhắn đến chủ đề SNS SNS kích hoạt hàm Chuyển đổi thành âm thanh Hàm Chuyển đổi thành âm thanh sử dụng Amazon Polly để tạo tệp âm thanh Tệp âm thanh sẽ được lưu vào trong bucket S3 Thực hiện test: 1. Kích hoạt thủ công hàm Lambda New Post Bước 1. Điều hướng đến trang dịch vụ của Lambda\nBước 2. Trong menu bên trái chọn Functions\nChọn hàm PostReader_NewPost\nBước 3. Chuyển sang tab Test sau đó chọn Test\nThông hiện lên khi hàm thực thi thành công.\n2. Kiểm tra dữ liệu có được thêm vào trong DynamoDB chưa Bước 1. Điều hướng đến trang dịch vụ của AWS DynamoDB\nBước 2. Trong menu bên trái chọn Explore items\nBước 3. Chọn bảng “posts”\nTùy vào số lần mà bạn đã test hàm gọi bài viết mới mà tồn tại số đối tượng bên trong bảng posts\n3. Kiểm tra sự hoạt động của hàm Chuyển đổi thành âm thanh Bước 1. Điều hướng tới trang dịch vụ của Lambda\nBước 2. Trong menu bên trái chọn Functions và chọn hàm “ConvertToAudio”\nBước 3. Chọn tab Monitor\nTa xem các biểu đồ giám sát việc gọi hàm. Như ở phần Recent invocations ta có thấy 2 lời gọi gần đây chính là 2 lần test hàm new post của chúng ta sau khi đã tạo hàm ConvertToAudio\n4. Kiểm tra xem đã có tệp âm thanh được tạo ra trong S3 hay chưa Bước 1. Điều hướng đến trang dịch vụ của S3\nBước 2. Tìm và chọn bucket audioposts-19012003 (tên bucket bạn đã đặt)\nBước 3. Tại tab Objects ta thấy được các tệp âm thanh đã được tạo. Bây giờ ta có thể tick vào tệp, tải xuống và mở lên sẽ nghe được giọng của Polly Joanna nói “This is working!”\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.7/",
	"title": "Tạo hàm Lambda Get Post",
	"tags": [],
	"description": "",
	"content": "Trong task này, chúng tạo hàm để lấy thông tin về các bài viết đã có sẵn trong DynamoDB\nCác bước tạo hàm: Bước 1. Điều hướng đến trang dịch vụ của Lambda\nBước 2. Chọn Create function\nBước 3. Thiết lập cho hàm\nChọn tùy chọn Author from scratch\nFunction name: Đặt tên hàm: PostReader_GetPost\nRuntime: Chọn Python 3.12\nNhấn vào Change default execution role để mở rộng các tùy chọn vai trò thực thi mặc định\nExecution role: Chọn Use an existing role\nExisting role: Chọn Lab-Lambda-Role\nChọn create function để hoàn tất quá trình tạo hàm.\nBước 4. Thêm code vào hàm\nXóa hết code sẵn có của hàm và chèn vào code python sau:\nimport boto3 import os from boto3.dynamodb.conditions import Key, Attr def lambda_handler(event, context): postId = event[\u0026#34;postId\u0026#34;] dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) if postId==\u0026#34;*\u0026#34;: items = table.scan() else: items = table.query( KeyConditionExpression=Key(\u0026#39;id\u0026#39;).eq(postId) ) return items[\u0026#34;Items\u0026#34;] Bước 5. Chọn Deploy để lưu thay đổi.\nVà tương tự như 2 hàm đã tạo trước ta, bây giờ ta thêm tên của bảng DynamoDB vào biến môi trường cho hàm.\nBước 6. Cấu hình biến môi trường\nĐiều hướng đến tab “Configuration”\nTrong bảng điều khiển bên trái, chọn “Environment variables”\nChọn vào “Edit” và thêm biến sau:\nKey: Nhập: DB_TABLE_NAME, Value: Nhập: posts Chọn vào “Save”\nBước 7. Test hàm\nChọn tab “Test”\nChọn Create new event\nEvent name: Nhập AllPosts\nEvent JSON:\n{\r\u0026#34;postId\u0026#34;: \u0026#34;\\*\u0026#34;\r} Chọn Save sau đó chọn Test\nMột thông báo thực thi thành công được đưa ra, Chọn Details ta để xem chi tiết kết quả của test.\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.8/",
	"title": "Công khai các Lambda function dưới dạng dịch vụ web RESTful",
	"tags": [],
	"description": "",
	"content": "Như vậy là phần xử lý logic của chúng ta đã được thiết lập xong, bây giờ ta sẽ dùng Amazon API Gateway để công khai các hàm Lambda của chúng ta dưới dạng dịch vụ web RESTful. Điều này cho phép ta có thể gọi chúng bằng các giao thức HTTP một cách dễ dàng.\nTạo API Gateway Bước 1. Tại AWS Management Console tìm API Gateway\nBước 2. Tong các loại API ta sẽ dùng REST API, chọn vào Build\nBước 3. Tạo REST API\nChọn “New API”\nAPI name: Đặt tên là: PostReaderAPI\nDescription: API cho ứng dụng TTS\nAPI endpoint type: chọn Regional\nChọn Create API\nCấu hình các phương thức HTTP Phương thức POST Bước 1. Trong bảng Resources, chọn tài nguyên gốc (/)\nBước 2. Chọn Create method\nBước 3. Cấu hình cho method\nMethod type: Chọn POST\nIntegration type: Chọn hàm Lambda\nChọn hàm chứa PostReader_NewPost\nChọn Create method để hoàn tất quá trình tạo\nPhương thức GET Bước 1. Trong bảng Resources, chọn tài nguyên gốc (/)\nBước 2. Chọn Create method\nBước 3. Cấu hình cho method\nMethod type: Chọn GET\nIntegration type: Chọn hàm Lambda\nChọn hàm chứa PostReader_GetPost\nChọn Create method để hoàn tất quá trình tạo\nKích hoạt CORS Cross-Origin Resource Sharing (CORS) cho phép gọi API từ các tên miền khác nhau.\nBước 1. Trong bảng Resources, chọn tài nguyên gốc (/)\nBước 2. Chọn Enable CORS\nBước 3. Thiết lập cấu hình\nGateway responses: Chọn “Default 4XX” và “Default 5XX”\nAccess-Control-Allow-Methods: Chọn GET và POST\nChọn Save để hoàn tất thiết lập.\nCấu hình tham số truy vấn Tiếp theo, ta sẽ cấu hình phương thức GET để chấp nhận một query parameter (tham số truy vấn) có tên là postId. Tham số này sẽ cung cấp thông tin về id của bài viết mà bạn muốn lấy về.\nBước 1. Chọn phương thức GET\nBước 2. Trong phần Method request chọn Edit\nBước 3. Chọn vào URL query string parameters để mở rộng nó ra\nBước 4. Chọn Add query string và tham số có Name: postId\nBước 5. Chọn Save\nThiết lập Request Mapping Hàm PostReader_GetPost Lambda yêu cầu dữ liệu đầu vào phải ở định dạng JSON, vì vậy cần cấu hình API để chuyển đổi các tham số được người dùng gửi (chẳng hạn như postId từ query parameter) thành định dạng JSON trước khi chuyển đến hàm Lambda.\nBước 1. Chọn phương thức GET\nBước 2. Chuyển đến tab Integration Request chọn Edit\nBước 3. Chỉnh lại các cài đặt\nMục Request body passthrough: chọn “When there are no templates defined (recommended)”\nNhấn vào mục Mapping Templates để mở rộng nó\nContent-Type: Nhập application/json\nTemplate body: Nhập:\n{\r\u0026#34;postId\u0026#34; : \u0026#34;$input.params(\u0026#39;postId\u0026#39;)\u0026#34;\r} Chọn Save để lưu thay đổi. Triển khai API Sau tất cả cài đặt, API đã sẵn sàng để triển khai rồi!\nBước 1. Chọn Deploy API\nBước 2.\nStage: Chọn *New Stage*\nStage name: Đặt tên: Dev\nPhần mô tả có thể bỏ qua, chọn Deploy\nBước 3. Sau khi deploy thành công, hãy lưu lại Invoke URL để sử dụng nhé.\n"
},
{
	"uri": "//localhost:1313/vi/3-target-group/3.9/",
	"title": "Tạo giao diện người dùng không máy chủ",
	"tags": [],
	"description": "",
	"content": "Mặc dù ứng dụng đã hoạt động, nhưng hiện tại nó chỉ được cung cấp dưới dạng một RESTful web service. Để người dùng có thể tương tác dễ dàng hơn, chúng ta sẽ triển khai một trang web nhỏ được lưu trữ trên Amazon S3. Amazon S3 là một lựa chọn lý tưởng cho việc lưu trữ các trang web tĩnh vì nó đơn giản, chi phí thấp và dễ quản lý.\nTrang web này sẽ sử dụng JavaScript để kết nối trực tiếp với API ta đã tạo ra, từ đó cung cấp tính năng chuyển đổi văn bản thành giọng nói (text-to-speech) thông qua giao diện web. Điều này giúp người dùng có thể nhập văn bản trực tiếp vào trang web và nghe kết quả giọng nói được tạo ra mà không cần phải thao tác với REST API trực tiếp.\nCác bước thực hiện: Bước 1. Tải các file sau về máy, bạn có thể click chuột phải chọn “Save Link As..” hoặc mở file lên, chuột phải chọn “Save As..”\nindex.html\nscripts.js\nstyles.css\nGiữ nguyên tên và phần mở rộng của các file để hoạt động bình thường nhé!\nBước 2. Mở file scripts.js lên bằng một trình soạn thảo bất kỳ (Notepad chẳng hạn). Tại dòng đầu tiên bạn sẽ thấy:\nvar API\\_ENDPOINT = \u0026#34;YOUR\\_API\\_GATEWAY\\_ENDPOINT\u0026#34; Thay thế “YOUR_API_GATEWAY_ENDPOINT” bằng URL Invoke của API bạn vừa triển khai ở trên. Sau đó nhớ lưu file lại nha.\nBước 3. Tạo 1 bucket S3 để chứa 3 file\nĐiều hướng tới trang dịch vụ của S3.\nChọn Create bucket và cấu hình các chi tiết sau:\nBucket name: Vì tên cần là đọc nhất nên để không bị trùng ta sẽ đặt: www-BUCKET với BUCKET được thay bằng tên của bucket audioposts bạn tạo trước đó (VD: tên bucket của tôi là: www-audioposts-19012003) Nhớ ghi lại tên của bucket để sử dụng sau này.\nMục Object Ownership, chọn ACLs enabled\nMục Block Public Access settings for this bucket: bỏ chọn Block all public access và đảm bảo rằng tất cả các tùy chọn khác cũng không được chọn.\nMột hộp cảnh báo sẽ xuất hiện, tick chọn mục “I acknowledge that the current settings might result in this bucket and the objects within becoming public”.\nChọn Create bucket\nBước 4. Tải 3 file trên lên bucket Amazon S3\nSau khi bucket đã được tạo, chọn nó từ danh sách bucket Chọn Upload\nChọn Add files và tải lên 3 file index.html, scripts.js và styles.css. Chọn Upoad để hoàn tất thao tác upload file.\nCác file phải được để nguyên tên: index.html, scripts.js và styles.css\nBước 5. Quay lại trang bucket đang chứa 3 file, chuyển sang tab Permissions\nTại mục Bucket Policy và chọn nút Edit.\nDán Policy này vào trình chỉnh sửa:\n{\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;,\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;s3:GetObject\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: [\r\u0026#34;arn:aws:s3:::www-BUCKET/*\u0026#34;\r]\r}\r]\r} Thay thế www-BUCKET bằng tên của bucket của bạn.\nChọn Save changes.\nBước 6. Cuối cùng, ta sẽ kích hoạt lưu trữ trang web tĩnh, như vậy bucket sẽ hoạt động như một trang web tĩnh.\nChuyển qua tab Properties.\nTìm đến phần Static website hosting và chọn Edit.\nChọn Enable cho Static website hosting\nMục Index document: index.html\nMục Error document - optional: index.html\nChúng ta đang sử dụng tệp index.html làm tài liệu lỗi.\nChọn Save changes.\nSau khi lưu, ta tìm lại về mục Static website hosting, sao chép Bucket website endpoint.\nVà đó là tất cả! Bạn có thể kiểm tra xem trang web có hoạt động hay không.\nMở một tab trình duyệt web và dán URL Endpoint mà bạn vừa sao chép.\nWeb sẽ được mở lên:\nNếu bạn viết gì đó vào ô văn bản và chọn Say it, new post sẽ được gửi đến ứng dụng của bạn. Ứng dụng sẽ chuyển đổi văn bản thành tệp âm thanh.\nĐể xem các post và tệp âm thanh của chúng, nhập ID post hoặc * (hiển thị tất cả) vào ô Tìm kiếm:\nTùy thuộc vào kích thước của văn bản bạn cung cấp, mà quá trình chuyển đổi sang âm thanh có thể mất thời gian. Những post vẫn chưa chuyển đổi xong có Status là PROCESSING.\nNút Play để nghe âm thanh.\nLink website: http://www-audioposts-19012003.s3-website-us-east-1.amazonaws.com/\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]